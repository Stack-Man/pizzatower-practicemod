if variable_global_exists("smallfont")
{
	draw_set_font(global.smallfont)
	
	//Prevent crash if the game is paused
	if instance_exists(obj_player)
	{
		var speed_x_percent_mach1 = ((abs(obj_player.hsp) / 8) * 100)
		var speed_x_percent_mach2 = 0
		if ((abs(obj_player.hsp) > 8))
				speed_x_percent_mach2 = (((abs(obj_player.hsp) - 8) / 4) * 100)
		var speed_x_percent_mach3 = 0
		if ((abs(obj_player.hsp) > 12))
				speed_x_percent_mach3 = (((abs(obj_player.hsp) - 12) / 4) * 100)
		var speed_x_percent_mach4 = 0
		if ((abs(obj_player.hsp) > 16))
				speed_x_percent_mach4 = (((abs(obj_player.hsp) - 16) / 4) * 100)
		var speed_x_percent_overflow = 0
		if ((abs(obj_player.hsp) > 20.1))
				speed_x_percent_overflow = (((abs(obj_player.hsp) - 20) / 60) * 100)
		draw_set_halign(fa_left)
		draw_set_valign(fa_top)
		if ((abs(obj_player.hsp) > 10))
				draw_text((obj_screensizer.actual_width - 78), ((obj_screensizer.actual_height / 2) + 82), string_format(round(abs(obj_player.hsp)), 2, 0))
		else
				draw_text((obj_screensizer.actual_width - 85), ((obj_screensizer.actual_height / 2) + 82), string_format(round(abs(obj_player.hsp)), 2, 0))
		if ((abs(obj_player.vsp) > 10))
				draw_text((obj_screensizer.actual_width - 48), ((obj_screensizer.actual_height / 2) + 82), string_format(round(abs(obj_player.vsp)), 2, 0))
		else
				draw_text((obj_screensizer.actual_width - 55), ((obj_screensizer.actual_height / 2) + 82), string_format(round(abs(obj_player.vsp)), 2, 0))
		draw_healthbar((obj_screensizer.actual_width - 70), ((obj_screensizer.actual_height / 2) + 41), (obj_screensizer.actual_width - 60), ((obj_screensizer.actual_height / 2) + 80), speed_x_percent_mach1, c_gray, c_maroon, c_maroon, 3, 1, 0)
		draw_healthbar((obj_screensizer.actual_width - 70), ((obj_screensizer.actual_height / 2) + 21), (obj_screensizer.actual_width - 60), ((obj_screensizer.actual_height / 2) + 40), speed_x_percent_mach2, c_gray, c_orange, c_orange, 3, 1, 0)
		draw_healthbar((obj_screensizer.actual_width - 70), ((obj_screensizer.actual_height / 2) + 1), (obj_screensizer.actual_width - 60), ((obj_screensizer.actual_height / 2) + 20), speed_x_percent_mach3, c_gray, c_green, c_green, 3, 1, 0)
		draw_healthbar((obj_screensizer.actual_width - 70), ((obj_screensizer.actual_height / 2) - 20), (obj_screensizer.actual_width - 60), ((obj_screensizer.actual_height / 2) + 0), speed_x_percent_mach4, c_gray, c_lime, c_lime, 3, 1, 0)
		draw_healthbar((obj_screensizer.actual_width - 70), ((obj_screensizer.actual_height / 2) - 330), (obj_screensizer.actual_width - 60), ((obj_screensizer.actual_height / 2) - 21), speed_x_percent_overflow, c_black, c_lime, c_lime, 3, 0, 0)
		var speed_y_percent = abs(((obj_player.vsp / 20) * 100))
		var speed_y_percent_overflow = 0
		if ((abs(obj_player.vsp) > 20))
				speed_y_percent_overflow = (((abs(obj_player.vsp) - 20) / 60) * 100)
		draw_healthbar((obj_screensizer.actual_width - 40), ((obj_screensizer.actual_height / 2) - 20), (obj_screensizer.actual_width - 30), ((obj_screensizer.actual_height / 2) + 80), speed_y_percent, c_gray, c_red, c_lime, 3, 1, 0)
		draw_healthbar((obj_screensizer.actual_width - 40), ((obj_screensizer.actual_height / 2) - 330), (obj_screensizer.actual_width - 30), ((obj_screensizer.actual_height / 2) - 21), speed_y_percent_overflow, c_black, c_lime, c_lime, 3, 0, 0)
		draw_set_alpha(1)
		draw_set_color(c_white)
		draw_set_halign(fa_left)
		draw_set_valign(fa_top)

		//Draw Version
		var versionstr = "SPM V3.1.1.063 "
		draw_text(8, 8, versionstr)

		//Draw Stats
		if (global.showstats > 0)
		{
			//Position
			var statsposX = concat("X:", obj_player.x)
			var statsposY = concat("      Y:", obj_player.y)
			
			//Negative
			if (obj_player.x < 0)
				statsposX = concat("X:M", obj_player.x)
				
			if (obj_player.y < 0)
				statsposY = concat("      Y:M", obj_player.y)
				
			draw_text(8, 32, statsposX)
			draw_text(8, 32, statsposY)
			
			//Speed
			var statsspeedX = concat("VX:", obj_player.hsp)
			var statsspeedY = concat("      VY:", obj_player.vsp)
			
			//Negative
			if (obj_player.hsp < 0)
				statsposX = concat("VX:M", obj_player.hsp)
				
			if (obj_player.vsp < 0)
				statsposY = concat("      VY:M", obj_player.vsp)
			
			draw_text(8, 56, statsspeedX)
			draw_text(8, 56, statsspeedY)
		
			//Input
			var input_display_width_offset = -30
            var input_display_height = 25
            var inputs = [obj_player1.key_up, obj_player1.key_down, obj_player1.key_right, abs(obj_player1.key_left), obj_player1.key_jump2, obj_player1.key_slap, obj_player1.key_attack, obj_player1.key_taunt]
																																								  
  
            for (var i = 0; i < array_length(inputs); i++)
            {
                if (i == 4)
                {
                    input_display_height = 70
                    input_display_width_offset = -30
                }
                input_display_width_offset += 60
                var color = (inputs[i] ? c_white : c_gray)
	
																																			  
                draw_sprite_ext(spr_controlicons, i, (obj_screensizer.actual_width - input_display_width_offset), input_display_height, 1, 1, 0, color, 1)
	
            }
  
            input_display_height = 125
            if obj_player1.key_superjump
																														   
                draw_sprite(spr_controlicons, 9, (obj_screensizer.actual_width - 30), input_display_height)
            if obj_player1.key_groundpound2
																															   
                draw_sprite(spr_controlicons, 10, (obj_screensizer.actual_width - 90), input_display_height)
  		
			
			if (global.showstats > 1)
			{
				//Acceleration
				var statsaccelX = concat("            AX:", (obj_player.hsp - speed_x_prev_tick))
				var statsaccelY = concat("                  AY:", (obj_player.vsp - speed_y_prev_tick))
				draw_text(8, 32, statsaccelX)
				draw_text(8, 32, statsaccelY)

				//Score
				var truescore = (global.collect + global.collectN)
				var collectval = concat("SCORE: ", truescore, " P: ", global.collect, " N: ", global.collectN)
				var comboval = concat("COMBO: ", global.comboscore)
				draw_text(8, 80, collectval)
				draw_text(8, 104, comboval)

				//Chef task vars
				var var_text_offset = 0
				for (i = 0; i < array_length(obj_achievementtracker.achievements_notify); i++)
				{
					var real_task_data = obj_achievementtracker.achievements_notify[i]
					for (var j = 0; j < array_length(chef_task_vars); j++)
					{
						if ((chef_task_vars[j].task_name == real_task_data.name) && (chef_task_vars[j].level == global.leveltosave))
						{
							var variable_for_task = ds_map_find_value(real_task_data.variables, chef_task_vars[j].variable)
							if ((variable_for_task != undefined))
							{
								draw_text(10, ((var_text_offset * 24) + 128), ((chef_task_vars[j].text + ": ") + string(variable_for_task.value)))
								var_text_offset += 1
							}
						}
					}
				}
			}
		
			//Roomname and current sprite
			draw_set_font(global.creditsfont)
			var roomname = concat(room_get_name(room), " ", obj_player.targetDoor)
			draw_text(180, 0, roomname)
		}

		//Update previous tick's speed values after drawing them on screen
		speed_x_prev_tick = obj_player.hsp
		speed_y_prev_tick = obj_player.vsp
	}
	//Version Text while paused
    else
    {
        draw_set_halign(fa_left)
        draw_set_valign(fa_top)
        var cred = "SPM V3.1.1.063  BY STACK MAN & SUNGLASSES & JOLLY"
        draw_text(8, 8, cred)
    }
	draw_set_valign(fa_bottom)
	draw_set_font(global.smallfont)
	
	//Room Timer
	seconds = global.room_seconds
	minutes = global.room_minutes
	s_str = ""
	m_str = ""
	mm = frac(seconds)
	mm = string(mm)
	mm = string_copy(mm, 3, 5)
	while (string_length(mm) < 1)
		mm += "0"
	sd = floor(seconds)
	if (sd < 10)
		s_str = concat(0, sd)
	else
		s_str = string(sd)
	minutes = floor(minutes)
	hours = 0
	while (minutes > 59)
	{
		minutes -= 60
		hours++
	}
	if (minutes < 10)
		m_str = concat(0, minutes)
	else
		m_str = string(minutes)
	if (hours < 10)
		hours = concat(0, hours)
	else
		hours = string(hours)
	finalstr = concat(hours, ":", m_str, ":", s_str, ".", mm)
	
	//set bonk timer
	if instance_exists(obj_player)
	{	
		var spritename = obj_player.sprite_index
	
		if (spritename != lastspritename)
		{
			lastspritename = spritename
			
			if (spritename == spr_player_wallsplat || spritename == spr_player_rockethitwall || spritename == spr_player_mach3hitwall
			|| spritename == spr_knightpep_bump || spritename == spr_player_ratmountbump || spritename == spr_lonegustavo_bump
			|| spritename == spr_player_suplexbump || spritename == spr_player_superjumpland || spritename == spr_player_bump
			|| spritename == spr_playerN_mach3hitwall)
			{
				room_time_atbonk = finalstr
			}
		}
	}
	
	//frozen room timer
	//and bonk timer
	if instance_exists(obj_player)
        room_time_paused = finalstr
    else
	{
		draw_text(150, (obj_screensizer.actual_height - 32),  concat("PAUSE ", room_time_paused))	
		draw_text(150, (obj_screensizer.actual_height - 8), concat("BONK  ", room_time_atbonk))
	}
        								   
	draw_text(10, (obj_screensizer.actual_height - 32), finalstr)

	//Room Frames
	var frames = string(global.room_frames_prev)
	seconds = ((global.room_frames_prev % 3600) / 60)
	s_str = string_format(seconds, 2, 3)
	s_str = string_replace(s_str, " ", "0")
	minutes = floor((global.room_frames_prev / 3600))
	if (minutes > 0)
		m_str = (string(minutes) + ":")
	else
		m_str = ""
	finalstr = concat(m_str, s_str, " ", frames)
	draw_text(10, (obj_screensizer.actual_height - 8), finalstr)
	
	if (global.showstats > 0)
    {
        var fps_from_delta = (1000000 / delta_time)
        if (fps_from_delta < 50)
            draw_set_color(c_red)
        else if (fps_from_delta < 59)
            draw_set_color(c_yellow)
        if (global.showstats > 1 || fps_from_delta < 59)
        {
            draw_text(10, (obj_screensizer.actual_height - 56), string_format(fps_from_delta, 1, 1))
            draw_text(60, (obj_screensizer.actual_height - 56), "FPS")
        }
        draw_set_color(c_white)
    }
}