//every second frame
if (frames > 0)
    frames--
if (frames <= 0)
{
    frames = framesmax
	
	//within a certain distance of camera bounds
    var cx = camera_get_view_x(view_camera[0])
    var cy = camera_get_view_y(view_camera[0])
    var cw = camera_get_view_width(view_camera[0])
    var ch = camera_get_view_height(view_camera[0])
	
	//for each object in the cull list
    for (var i = 0; i < ds_list_size(cull_list); i++)
    {
        var b = ds_list_find_value(cull_list, i)
		
		//if it is within the bounds
        if rectangle_in_rectangle(b.bbox_left, b.bbox_top, b.bbox_right, b.bbox_bottom, (cx - offset), (cy - offset), ((cx + cw) + offset), ((cy + ch) + offset))
        {
			//reactivate the object
            instance_activate_object(b.ID)
			
			//if the object is a baddiecollisionbox, also activate the collision's baddieID
            switch b.object_index
            {
                case obj_baddiecollisionbox:
                    instance_activate_object(b.baddieID)
                    break
            }
			
			//remove the reactivated object from the list
			//and decrement i since we've removed an obj from the list
            ds_list_delete(cull_list, i--)
        }
    }
	
	//for each type of object that should be culled
    for (i = 0; i < array_length(object_arr); i++)
    {
        b = object_arr[i]
		
		//with all objects of that type
        with (b)
        {
			//if the object is not in bounds
            if (!(rectangle_in_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, (cx - other.offset), (cy - other.offset), ((cx + cw) + other.offset), ((cy + ch) + other.offset))))
            {
				//get the object index
                var q = 
                {
                    object_index: b
                }
						
				//get instance ID and bbox
                q.ID = id
                q.bbox_left = bbox_left
                q.bbox_right = bbox_right
                q.bbox_bottom = bbox_bottom
                q.bbox_top = bbox_top
				
				//if still 0, deactivate for real
                var _deactivate = 1
				
				//if the object to deactivate is a baddiecollisionbox
                switch b
                {
                    case 622:
						//if said baddie exists and its important, thrown, or not grounded, dont cull it
                        if (instance_exists(baddieID) && (baddieID.important || baddieID.thrown || (!baddieID.grounded)))
                            _deactivate = 0
							
						//but if we are decativating it,
						//decativate its baddieID as well
                        if _deactivate
                        {
                            q.baddieID = baddieID
                            instance_deactivate_object(baddieID)
                        }
                        break
                }

				//if we are decativating, decativate the object then add it to the cull list
                if _deactivate
                {
                    ds_list_add(other.cull_list, q)
                    instance_deactivate_object(id)
                }
            }
        }
    }
}
