//slot is set during step_1
var save = global.savestates[slot]

//save index : value
// 0 : room name
// 1 : objects (array)
// 2 : global variables (array)
// 3 : camera X
// 4 : camera Y
// 5 : dont save instance IDs (array)

//for each object in save
for (var i = 0; i < array_length(save[1]); i++)
{
    var obj = save[1][i]
	
	//obj index : Value
	// 0 : instance id
	// 1 : object index
	// 2 : x pos
	// 3 : y pos
	// 4 : image_speed
	// 5 : image_index
	// 6 : sprite_index
	// 7 : variables (2D array)
	// 8 : alarms (array) 
	// 9 : image_xscale
	// 10 : image_yscale

	//check if dontsave contains id
	var dontload = 0
	
	for (var d = 0; d < array_length(save[5]); d++)
	{
		if (obj[0] == save[5][d])
		{
			dontload = 1
			d = array_length(save[5])
		}			
	}


	//not a solid_inst/solidID from onewaybigblock/monstergate
	if (!dontload)
	{
	
		//If the object id in the save doesn't already exist
		if (!instance_exists(obj[0]))
			obj[0] = instance_create(obj[2], obj[3], obj[1])		
		
		//set the objects variables
		with (obj[0])
		{
			x = obj[2]
			y = obj[3]
			
			image_speed = obj[4]
			image_index = obj[5]
			sprite_index = obj[6]
			
			image_xscale = obj[9]
			image_yscale = obj[10]
			
			//Don't write vars of followcharacter, they get written during obj_followcharacter_create_0
			//[j][0] is name and [j][1] is value
			if (!object_is_ancestor(object_index, obj_followcharacter))
			{
				//initialize the objects variables
				for (var j = 0; j < array_length(obj[7]); j++)
					//dont reinit pumpkin sound
					if ((object_index == obj_pumpkin || object_index == obj_crosspriest_cross || object_index == obj_instanttemp) && obj[7][j][0] == "snd")
					{
						
						if (object_index == obj_pumpkin)
							destroy_sounds([obj[7][j][1]])
						
						//if (object_index == obj_crosspriest_cross)
						{
							//variable_instance_set(id, obj[7][j][0], fmod_event_create_instance("event:/sfx/pep/cross"))
							//fmod_event_instance_play(variable_instance_get(id, obj[7][j][0]))
						}

					}
						
					else
						variable_instance_set(id, obj[7][j][0], obj[7][j][1])
			}
			
			//initialize the objects alarms
			for (j = 0; j <= 11; j++)
				alarm[j] = obj[8][j]
				
			//Set to not destroy
			SAVESTATE = 1
			
		}
	}
}

//reactivate culled objs
//Does not properly remember states of objs, only ends up resetting them to their original positions
//would be an issue if a player loads object > changes its state (movement?) > unloads objects > saves state > loads said state > loads object again
//only enemies have a noticeable issue doing this?
with (obj_cullingsystem)
{
	ds_list_copy(cull_list, save[6])
	
	//var cx = camera_get_view_x(view_camera[0])
    //var cy = camera_get_view_y(view_camera[0])
    //var cw = camera_get_view_width(view_camera[0])
    //var ch = camera_get_view_height(view_camera[0])
	
	//reactivate culled objects
	for (var i = 0; i < ds_list_size(cull_list); i++)
    {
        var b = ds_list_find_value(cull_list, i)
        //if rectangle_in_rectangle(b.bbox_left, b.bbox_top, b.bbox_right, b.bbox_bottom, (cx - offset), (cy - offset), ((cx + cw) + offset), ((cy + ch) + offset))
        {
            instance_activate_object(b.ID)
            switch b.object_index
            {
                case obj_baddiecollisionbox:
                    instance_activate_object(b.baddieID)
					variable_instance_set(b.baddieID, "SAVESTATE", 1)
                    break
            }
		
            ds_list_delete(cull_list, i--)
			
			variable_instance_set(b.ID, "SAVESTATE", 1)
        }
    }
	
	//Load object info for culled objects

	//There's nothing in the array for some reason
	//for (var i = 0; i < array_length(save[7]); i++)
	{
		//var obj = save[7][i]
		
		//If the object id in the save doesn't already exist
		//if (!instance_exists(obj[0]))
			//obj[0] = instance_create(obj[2], obj[3], obj[1])		
		
		//set the objects variables
		//with (obj[0])
		//{
			//obj[0].x = obj[2]
			//obj[0].y = obj[3]
			
			//obj[0].image_speed = obj[4]
			//obj[0].image_index = obj[5]
			//obj[0].sprite_index = obj[6]
			
			//obj[0].image_xscale = obj[9]
			//obj[0].image_yscale = obj[10]
			
			//[j][0] is name and [j][1] is value
			//for (var j = 0; j < array_length(obj[7]); j++)
				//variable_instance_set(obj[0].id, obj[7][j][0], obj[7][j][1])
			
			//initialize the objects alarms
			//for (j = 0; j <= 11; j++)
				//obj[0].alarm[j] = obj[8][j]
				
			//Set to not destroy
			//obj[0].SAVESTATE = 1
			
		//}
	}
}


with (all)
{
	//Destroy any objects that still have a SAVESTATE value of 0
	//The room gets loaded, so we need to destroy objects that weren't saved because they were destroyed before saving
	//important to prevent dupe objects
    if (object_index != obj_tas_tool && object_index != obj_music)
    {
        if ((!(variable_instance_exists(id, "SAVESTATE"))) || variable_instance_get(id, "SAVESTATE") == 0)
		{	
			instance_destroy(id, false)
		}		           
    }
}

//recreate the oneway's solid since it gets deleted on load
with (obj_onewaybigblock)
{
	if (image_xscale == 1)
	{
		with (instance_create(x, y, obj_solid))
		{
			image_yscale = 2
			other.solid_inst = id
		}
	}
	if (image_xscale == -1)
	{
		with (instance_create((x - 32), y, obj_solid))
		{
			image_yscale = 2
			other.solid_inst = id
		}
	}
}

//do the same with the alarm gate
with (obj_monstergate)
{
	solidID = instance_create(x, y, obj_solid)
	solidID.sprite_index = sprite_index
	solidID.visible = false
	solidID.image_speed = 0
	solidID.image_xscale = image_xscale
	solidID.image_yscale = image_yscale
}

//Reset global.spaceblockswitch to prevent obj_spaceblockswitch from overwriting it
if instance_exists(obj_spaceblockswitch)
{
	for (j = 0; j < array_length(save[2]); j++)
	{
		glob = save[2][j]
		if (glob[0] == "spaceblockswitch")
			variable_global_set(glob[0], glob[1])
	}
}

//with (obj_racestart)
{
	//var pos = ds_list_find_index(global.saveroom, id)

	//if (pos != -1)
	{
		//ds_list_delete(global.saveroom, pos)
	}
}

//Set camera position
camera_set_view_pos(view_camera[0], save[3], save[4])

create_transformation_tip(("Loaded slot " + string(slot)))

global.loadingstate = 0
